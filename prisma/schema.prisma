generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model: Vendors and customers are differentiated by `userType`
model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?   @unique
  isActive         Boolean   @default(false)
  userType         UserType  @default(VENDOR) // To differentiate vendors and customers
  accounts         Account[]
  sessions         Session[]

  // Relationship to Vendor's Apps (bots) and customer's interactions
  App App[] // A user can be associated with multiple apps (bots)

  // If user is a vendor, they can have multiple customers interacting with their bots
  Customer Customer[]
}

enum UserType {
  VENDOR // Vendor: Owns one or more bots (App)
  CUSTOMER // Customer: Interacts with bots created by vendors
}

// Account model for OAuth/SSO handling
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session model for tracking user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model App {
  id         String   @id @default(cuid())
  name       String
  botToken   String   @unique
  userId     String
  webhookUrl String?
  miniAppUrl String? // Optional â€” your /mini route or subroute
  createdAt  DateTime @default(now())
  slug       String   @unique
  imageUrl   String?

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Customer Customer[]

  @@index([userId])
}

// Customer model for storing customer interactions with bots
model Customer {
  id        String   @id @default(cuid())
  userId    String
  appId     String
  createdAt DateTime @default(now())

  phoneNumber String? // Optional: Store phone number if needed
  firstName   String? // Optional: Store first name if needed
  lastName    String? // Optional: Store last name if needed
  isPremium  Boolean @default(false) // Optional: Flag for premium customers
  isBot      Boolean @default(false) // Optional: Flag to indicate if the customer is a bot
  chatId     String?  @default("chatID")// Optional: Store chat ID if needed
  photoUrl  String? // Optional: Store photo URL if needed
  languageCode String? // Optional: Store language code for localization
  username String? // Optional: Store username if needed
  
  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  app  App  @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@index([userId, appId])
}
